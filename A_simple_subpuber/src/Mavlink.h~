/* Auto-generated by genmsg_cpp for file /home/ndrobotic/mavlink_ros/msg/Mavlink.msg */
#ifndef MAVLINK_ROS_MESSAGE_MAVLINK_H
#define MAVLINK_ROS_MESSAGE_MAVLINK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace A_simple_subpuber
{
template <class ContainerAllocator>
struct Mavlink_ {
  typedef Mavlink_<ContainerAllocator> Type;

  Mavlink_()
  : header()
  , len(0)
  , seq(0)
  , sysid(0)
  , compid(0)
  , msgid(0)
  , fromlcm(false)
  , payload64()
  {
  }

  Mavlink_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , len(0)
  , seq(0)
  , sysid(0)
  , compid(0)
  , msgid(0)
  , fromlcm(false)
  , payload64(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _len_type;
  uint8_t len;

  typedef uint8_t _seq_type;
  uint8_t seq;

  typedef uint8_t _sysid_type;
  uint8_t sysid;

  typedef uint8_t _compid_type;
  uint8_t compid;

  typedef uint8_t _msgid_type;
  uint8_t msgid;

  typedef uint8_t _fromlcm_type;
  uint8_t fromlcm;

  typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _payload64_type;
  std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  payload64;


  typedef boost::shared_ptr< ::mavlink_ros::Mavlink_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ros::Mavlink_<ContainerAllocator>  const> ConstPtr;
}; // struct Mavlink
typedef  ::mavlink_ros::Mavlink_<std::allocator<void> > Mavlink;

typedef boost::shared_ptr< ::mavlink_ros::Mavlink> MavlinkPtr;
typedef boost::shared_ptr< ::mavlink_ros::Mavlink const> MavlinkConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mavlink_ros::Mavlink_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mavlink_ros::Mavlink_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mavlink_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mavlink_ros::Mavlink_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mavlink_ros::Mavlink_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3513d96e87d97146fed4643086047ddd";
  }

  static const char* value(const  ::mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3513d96e87d97146ULL;
  static const uint64_t static_value2 = 0xfed4643086047dddULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mavlink_ros/Mavlink";
  }

  static const char* value(const  ::mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 len\n\
uint8 seq\n\
uint8 sysid\n\
uint8 compid\n\
uint8 msgid\n\
bool fromlcm\n\
uint64[] payload64\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::mavlink_ros::Mavlink_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::mavlink_ros::Mavlink_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mavlink_ros::Mavlink_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.len);
    stream.next(m.seq);
    stream.next(m.sysid);
    stream.next(m.compid);
    stream.next(m.msgid);
    stream.next(m.fromlcm);
    stream.next(m.payload64);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Mavlink_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ros::Mavlink_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mavlink_ros::Mavlink_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "len: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.len);
    s << indent << "seq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seq);
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "msgid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msgid);
    s << indent << "fromlcm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fromlcm);
    s << indent << "payload64[]" << std::endl;
    for (size_t i = 0; i < v.payload64.size(); ++i)
    {
      s << indent << "  payload64[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.payload64[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ROS_MESSAGE_MAVLINK_H

